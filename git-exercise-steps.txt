1. Create two folders project1 and project2 locally. Create a repository in github or bitbucket, name it test_project.
— Created 2 separate folder “project1” and “project2” locally and created a repository in GitHub named as “test_project.

2. Switch to project1
— Done

3. Switch to a new branch - 'staging'.
— Used ( git checkout -b staging )

4. Add a file in it - 'test1' and add content to it 'This is first commit'.
— Used ( git commit -m "This is first commit" )

5. Push it to github.
— Used ( git remote add origin git@github.com:sachwins/test_project.git )
— Used ( git push -u origin staging )

6. Move to folder project2.
— Done

7. Clone the repo in project2.
— Used ( git clone git@github.com:sachwins/test_project.git )

8. Switch to staging.
— Used ( git checkout staging )

9. Change the text in file 'test1' to 'This is second commit'.
— Used ( git commit -m "This is second commit" )

10. Commit and push to remote branch.
— Used ( git push origin staging )

11. Move to project1.
— Done

12. Switch to staging branch.
— Used ( git checkout staging )

13. Change the text in file 'test1' to 'This is third commit'.
— Used ( git commit -m "This is third commit" )

14. Commit and push to remote branch. (Explain what happened here).
— Used ( git push origin staging ) to push
 ! [rejected]        staging -> staging (fetch first)
 error: failed to push some refs to 'git@github.com:sachwins/test_project.git'
 hint: Updates were rejected because the remote contains work that you do
 hint: not have locally. This is usually caused by another repository pushing
 hint: to the same ref. You may want to first integrate the remote changes
 hint: (e.g., 'git pull ...') before pushing again.
 hint: See the 'Note about fast-forwards' in 'git push --help' for details.

15. Switch to master.
— Used ( git checkout -b master )

16. Merge staging branch into master.
— Used ( git merge staging )

17. Create a new branch testing.
— Used ( git checkout -b testing )

18. Change the text to 'A is an alphabet' and commit.
— Text changed and commit ( git commit -m "A is an alphabet" )
 [testing fe63d96] A is an alphabet
 1 file changed, 1 insertion(+), 1 deletion(-)

19. Repeat the 'step 18' seven times and each time update the alphabet 'A' to 'B' to 'C' etc.(Don't forget to commit the change everytime)
— Done

20. Push the branch to github.
— Used (git push origin testing)
Enumerating objects: 26, done.
Counting objects: 100% (26/26), done.
Delta compression using up to 8 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (24/24), 1.87 KiB | 637.00 KiB/s, done.
Total 24 (delta 0), reused 0 (delta 0)
remote: 
remote: Create a pull request for 'testing' on GitHub by visiting:
remote:      https://github.com/sachwins/test_project/pull/new/testing
remote: 
To github.com:sachwins/test_project.git
 * [new branch]      testing -> testing

21. Checkout to master.
— Used (git push origin testing)

22. Change the text '1 is a number' and commit.
— Used ( git commit -a -m "1 is a number" )
[master 13a27ae] 1 is a number
 1 file changed, 1 insertion(+), 1 deletion(-)

23. Repeat the 'step 22' seven times and each time update the number '1' to '2' to '3' etc.(Don't forget to commit the change everytime)
— Done

24. Push master branch to github.
— Used ( git push origin master )
Enumerating objects: 26, done.
Counting objects: 100% (26/26), done.
Delta compression using up to 8 threads
Compressing objects: 100% (8/8), done.
Writing objects: 100% (24/24), 1.81 KiB | 616.00 KiB/s, done.
Total 24 (delta 0), reused 0 (delta 0)
To github.com:sachwins/test_project.git
   ac05054..31bf646  master -> master

25. Now, rebase testing into master(and don't push the new master and testing branch).
— Used (  git rebase testing )
First, rewinding head to replay your work on top of it...
Applying: 1 is a number
Using index info to reconstruct a base tree...
M	test1.txt
Falling back to patching base and 3-way merge...
Auto-merging test1.txt
CONFLICT (content): Merge conflict in test1.txt
error: Failed to merge in the changes.
Patch failed at 0001 1 is a number
hint: Use 'git am --show-current-patch' to see the failed patch

Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".

— When I checked git branch. It showing the below content.

akanksha$ git branch
* (no branch, rebasing master)
  master
  staging
  testing


26. Move to project2.
— Done

27. Track testing branch.
— Didn’t get it.


 28. Checkout to master.
— Done

 29. Merge branch testing into master.
— Didn’t find testing branch in “project2”

 30. Share your views about the difference between master and testing.
— Didn’t find testing branch in “project2”